/*
 * jQuery aaencode plugin v0.1.1
 * 
 * Description: jQuery plugin to obfuscate JavaScript into smiley faces.  
 *
 * Based on aaencode function, written by Yosuke Hasegawa.
 *
 * @author  : Bayu Prayudha
 * @twitter : @bprayudha
 *
 * https://github.com/bprayudha/jquery.aaencode
 *
 */

function _aaencode(text) {
    var t;
    // 定义一些表情字符用作替代目标, 里面的每一个表情都对应着一个真正的值，分别是 0-9 a-f 一共16个
    var b = [
        "(c^_^o)",
        "(ﾟΘﾟ)",
        "((o^_^o) - (ﾟΘﾟ))",
        "(o^_^o)",
        "(ﾟｰﾟ)",
        "((ﾟｰﾟ) + (ﾟΘﾟ))",
        "((o^_^o) +(o^_^o))",
        "((ﾟｰﾟ) + (o^_^o))",
        "((ﾟｰﾟ) + (ﾟｰﾟ))",
        "((ﾟｰﾟ) + (ﾟｰﾟ) + (ﾟΘﾟ))",
        "(ﾟДﾟ) .ﾟωﾟﾉ",
        "(ﾟДﾟ) .ﾟΘﾟﾉ",
        "(ﾟДﾟ) ['c']",
        "(ﾟДﾟ) .ﾟｰﾟﾉ",
        "(ﾟДﾟ) .ﾟДﾟﾉ",
        "(ﾟДﾟ) [ﾟΘﾟ]"
    ];
    // r 实际上是最终字符串
    // 定义了一些变量
    var r =
        // "ﾟωﾟﾉ = 
        "ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_'];" +
        // o = 3
        // _ = 3
        " o=(ﾟｰﾟ)  =_=3;" +
        // c = 0
        // (ﾟΘﾟ) = 0
        " c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); ";
    r +=
        // (ﾟДﾟ) = (ﾟΘﾟ) = 1
        "(ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);" +
        // (ﾟДﾟ) = {ﾟΘﾟ: "_", ﾟωﾟﾉ: "a", ﾟｰﾟﾉ: "d", ﾟДﾟﾉ: "e"}
        "(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; " +
        // (ﾟДﾟ) [ﾟΘﾟ] = 'f'
        "(ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];" +
        // (ﾟДﾟ) ['c'] = 'c'
        "(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];" +
        // (ﾟДﾟ) ['o'] = 'o'
        "(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];" +
        // constructor
        "(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];" +
        // (ﾟДﾟ) ['_'] =  3['constructor']['constructor'] 等价于 ƒ Function() { [native code] }
        "(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];" +
        // (ﾟεﾟ) = 'return'
        "(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; " +
        // (ﾟｰﾟ) = 3
        "(ﾟｰﾟ)+=(ﾟΘﾟ);",
        // (ﾟДﾟ)[ﾟεﾟ] = "\\"
        "(ﾟДﾟ)[ﾟεﾟ]='\\\\'; " +
        // (ﾟДﾟ).ﾟΘﾟﾉ = "b"
        "(ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];" +
        // (oﾟｰﾟo) = 'u'
        "(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];" +
        // (ﾟДﾟ) [ﾟoﾟ] = "\\\""
        "(ﾟДﾟ) [ﾟoﾟ]='\\\"';" +
        // function (function (return object 中间导入的字符串 ))
        "(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_');";

    // 遍历传入字符串的所有字符
    for (var i = 0; i < text.length; i++) {
        n = text.charCodeAt(i);
        // charCodeAt() 方法可返回指定位置的字符的 Unicode 编码数
        // 每一个字符的标记记录 默认在前面就有一个表情
        t = "(ﾟДﾟ)[ﾟεﾟ]+";
        if (n <= 127) {
            // unicode 只处理 C0控制与基本的Latin（拉丁字母），这其实已经包含了绝大部分的js源码符号
            // 将 十进制数字符串 转为 为8进制数字符串
            n = n.toString(8);
            // 对八进制数字符串 里的每一个数字(0-7) 用 预先定义好的表情符合进行取代
            t += n.replace(/[0-7]/g, function (c) {
                return b[c] + "+ ";
                // 取代完以后，在最后添加一个 '+ '用于最后eval函数拼接而不出问题
            });
        } else {
            // 对于非C0控制与基本的Latin（拉丁字母）。即 非js代码部分，诸如中文之类的
            // 用 "000"+原字符数字转16进制
            n = "000" + n.toString(16);
            // 用正则表达式/[0-9a-f]{4}$/ 在 十六进数字字符 中寻找匹配项 并返回最短匹配
            var m = /[0-9a-f]{4}$/.exec(n)[0];
            // 将这个 十六进数字字符 转为 10进制数字，在根据 10进制数字转为表情，在最后添加一个 '+ '
            m = m.replace(/[0-9a-f]/gi, function (c) {
                return b[parseInt(c, 16)] + "+ ";
            });
            // 字符结果添加前缀表情以作标记
            t += "(oﾟｰﾟo)+ " + m;
        }
        // 单个字符汇总到答案
        r += t;

    }

    // 添加结尾字符
    r += "(ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_');";

    // 返回整个字符串
    return r;
}

var i = _aaencode("console.log('你好')");
console.log(i);